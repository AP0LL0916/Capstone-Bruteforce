from colorama import Fore, Back, Style
import os
import time
import itertools
import string
from os import system, name

def clear():
    if name == 'nt':
        _ = system('cls')

    else:
        _ = system('clear')

    return

def bruteforce():
        
    # This will be the function that will take the password generated by the randomizer and test it against the password file that needs to be cracked.

    # Will most likely have system commands to interact with password protected file
    return

def charTables(charOption):
    
    charlist1 = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
    
    charlist2 = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l","m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
    
    charlist3 = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l","m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "!", "@", "#", "$", "%", "?", "&", "*"]
    
    charlist4 = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l","m","n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "!", "@", "#", "$", "%", "?", "&", "*", "~", "'", "^", "(", ")", "_", "-", "+","=", "{", "[", "}", "]", "|", ":", ";", '"', ",", ".", "<", ">", "/", "`", "\\"]
    
    charlist5 = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
     
    charlist6 = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L","M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]

    charlist7 = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L","M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "!", "@", "#", "$", "%", "?", "&", "*"]

    charlist8 = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L","M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "!", "@", "#", "$", "%", "?", "&", "*", "~", "'", "^", "(", ")", "_", "-", "+","=", "{", "[", "}", "]", "|", ":", ";", '"', ",", ".", "<", ">", "/", "`", "\\"] 

    charlist9 = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l","m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z","A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
     
    charlist10 = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l","m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z","A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L","M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]

    charlist11 = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l","m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z","A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L","M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "!", "@", "#", "$", "%", "?", "&", "*"]

    charlist12 = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l","m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z","A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L","M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "!", "@", "#", "$", "%", "?", "&", "*", "~", "'", "^", "(", ")", "_", "-", "+","=", "{", "[", "}", "]", "|", ":", ";", '"', ",", ".", "<", ">", "/", "`", "\\"]

    if charOption == 1:
        characterTable = charlist1
        return characterTable

    if charOption == 2:
        characterTable = charlist2
        return characterTable

    if charOption == 3:
        characterTable = charlist3
        return characterTable

    if charOption == 4:
        characterTable = charlist4
        return characterTable

    if charOption == 5:
        characterTable = charlist5
        return characterTable

    if charOption == 6:
        characterTable = charlist6
        return characterTable

    if charOption == 7:
        characterTable = charlist7
        return characterTable

    if charOption == 8:
        characterTable = charlist8
        return characterTable
    
    if charOption == 9:
        characterTable = charlist9
        return characterTable

    if charOption == 10:
        characterTable = charlist10
        return characterTable

    if charOption == 11:
        characterTable = charlist11
        return characterTable

    if charOption == 12:
        characterTable = charlist12
        return characterTable

    Exiting()

def incremental():
    
    while 1 == 1:   
        print("\n\n")
        print(Fore.MAGENTA + "Please choose what type of character list you want to use to brute force" )
    
        print(Fore.RED + "\n[Speed Ratings]\n")
        quickest = Fore.BLUE + " [quickest]"
        quick = Fore.MAGENTA + " [quick]"
        moderate = Fore.WHITE + " [moderate]"
        slow = Fore.GREEN + " [slow]"
        slowest = Fore.YELLOW + " [slowest]"

        print(quickest, Fore.RED + "Number of trials needed (8 character pass length) n < 300,000,000,000")
        print(quick, Fore.RED + "Number of trials needed (8 character pass length) n < 12,000,000,000,000")
        print(moderate, Fore.RED + "Number of trials needed (8 character pass length) n < 60,000,000,000,000")
        print(slow, Fore.RED + "Number of trials needed (8 character pass length) n < 520,000,000,000,000")
        print(slowest, Fore.RED + "Number of trials needed (8 character pass length) n < 6,100,000,000,000,000 \n\n")
    
        print(Fore.CYAN + "1.) ", Fore.RED + " lowercase letters only a-z (26 chars)", quickest)
        print(Fore.CYAN + "2.) ", Fore.RED + " lowercase letters and numbers a-z 0-9 (36 chars)", quick)
        print(Fore.CYAN + "3.) ", Fore.RED + " lowercase letters, numbers, and some symbols a-z 0-9 !?@#$%& (43 chars)", quick)
        print(Fore.CYAN + "4.) ", Fore.RED + " lowercase letters, numbers, and all symbols a-z 0-9 (68 chars)", slow)
        print(Fore.CYAN + "5.) ", Fore.RED + " uppercase letters only a-z (26 chars)", quickest)
        print(Fore.CYAN + "6.) ", Fore.RED + " uppercase letters and numbers a-z 0-9 (36 chars)", quick)
        print(Fore.CYAN + "7.) ", Fore.RED + " uppercase letters, numbers, and some symbols a-z 0-9 !?@#$%& (43 chars)", quick)
        print(Fore.CYAN + "8.) ", Fore.RED + " uppercase letters, numbers, and all symbols a-z 0-9 (68 chars)", slow)
        print(Fore.CYAN + "9.) ", Fore.RED + " all letters a-z A-Z (52 chars)", moderate)
        print(Fore.CYAN + "10.) ", Fore.RED + "all letters and numbers a-z A-Z 0-9 (62 chars)", slow)
        print(Fore.CYAN + "11.) ", Fore.RED + "all letters, numbers, and some symbols a-z A-Z 0-9 !?@#$%& (69 chars)", slow)
        print(Fore.CYAN + "12.) ", Fore.RED + "all letters, numbers, and all symbols a-z A-Z 0-9 (94 chars)", slowest)    
        print(Fore.CYAN + "99.) ", Fore.RED + "return to main menu")
        print()

        cOption = input(Fore.GREEN + "Bruteforce:Chartable select" + Fore.RED + "> ")
        charOption = int(cOption)

        if charOption > 0 and charOption < 13:
            Table = charTables(charOption)
            length = len(Table)
            generate_passwords(Table, length)
        else:
            print(charOption, error)


    # This function will be responsible for generating unique passwords while
    # keeping track so it doesnt repeat itself.
    # This function must also be able to take parameters like the minimum password
    # length and maximum password length
    return

def generate_passwords(cTable, leng):
    print(cTable, leng)
    passwords = []
    for i in range(1, leng+1):
        passwords.extend([''.join(x) for x in itertools.product(cTable, repeat=i)])
    print(passwords)
    exit()

def wordlist():
    # This function will be responsible for using password files and wordlists and
    # testing them against password protected files
    return

def options():
    # This function will ask user whether they brute forcing WPA handshakes or
    # zip protected files
    while 1 == 1:
        print("\n\n")
        print(Fore.MAGENTA + "Please choose what type of files you wish to brute force" )
        print(Fore.CYAN + "1.) ", Fore.RED + " Password Protected Files ")
        print(Fore.CYAN + "2.) ", Fore.RED + " WPA handshake PCAP Files ")
        print(Fore.CYAN + "99.) ", Fore.RED + "To exit out of program ")
        print()    
        fOption = input(Fore.GREEN + "Bruteforce:options" + Fore.RED + ">")
    
        if fOption == '1':
            fileOptions()
        if fOption == '2':
            wpaOptions()
        if fOption == '99':
            Exiting()
        else:
            print(fOption, error)

def fileOptions():
    
    while 1 == 1:
        print("\n\n")
        print(Fore.MAGENTA + "Please choose what type of brute forcing you intend to do" )
        print(Fore.CYAN + "1.) ", Fore.RED + " Incremental ")
        print(Fore.CYAN + "2.) ", Fore.RED + " Wordlists ")
        print(Fore.CYAN + "99.) ", Fore.RED + "Return to main menu")
        print()

        hackOption = input(Fore.GREEN + "Bruteforce:Cracking Method" + Fore.RED + "> ")
    
        if hackOption == '1':
            incremental()
        if hackOption == '2':
            wordlists()
        if hackOption == '99':
            options()
        else:
            print(hackOption, error)


    # If user picked zip protected files they will be brought to this function
    # to decide whether they want to do incremental encryption or wordlist
    # cracking
    


        return

def wpaOptions():
    # WIP
    return
def Exiting():
    clear()
    quit()

def mainMenu():
    # initializes everything

    a = "             ____          ___               __          \n"
    b = "            /  _/______   / _ )_______ ___ _/ /_____ ____\n"
    c = "           _/ // __/ -_) / _  / __/ -_) _ `/  '_/ -_) __/ \n"
    d = "          /___/\__/\__/ /____/_/  \__/\_,_/_/\_\|__/_/    \n"
    n = a + b + c + d

    toolName = n.center(100, " ")
    print(Fore.WHITE + toolName)

    welcomeMessage = Fore.MAGENTA + " " + Fore.YELLOW + "a python bruteforce tool "
    Version = Fore.MAGENTA + "Ver: " + Fore.YELLOW + " 1.0.0"
    Github = Fore.MAGENTA + "Github: " + Fore.YELLOW + "https://github.com/AP0LL0916/Capstone-Bruteforce "

    welM = welcomeMessage.center(70, " ")
    Ver = Version.center(70, " ")
    Git = Github.center(70, " ")

    print(Fore.RED + "[---]", Fore.BLUE + welM, Fore.RED + "[---]")
    print(Fore.RED + "[---]", Fore.BLUE + Ver, Fore.RED + "[---]")
    print(Fore.RED + "[---]", Fore.BLUE + Git, Fore.RED + "[---]")

    options()

error = " is not an available choice please enter your desired option's number."
mainMenu()
